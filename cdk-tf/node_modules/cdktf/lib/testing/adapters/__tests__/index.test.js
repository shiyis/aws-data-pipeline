"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const __1 = require("../../..");
const helper_1 = require("../../../../test/helper");
const data_source_1 = require("../../../../test/helper/data-source");
const constructs_1 = require("constructs");
describe("#synthScope", () => {
    test("basic example", () => {
        expect(__1.Testing.synthScope((stack) => {
            new data_source_1.TestDataSource(stack, "test-data-source", {
                name: "foo",
            });
            new helper_1.TestResource(stack, "test-resource", {
                name: "bar",
            });
        })).toMatchInlineSnapshot(`
      "{
        \\"data\\": {
          \\"test_data_source\\": {
            \\"test-data-source\\": {
              \\"name\\": \\"foo\\"
            }
          }
        },
        \\"resource\\": {
          \\"test_resource\\": {
            \\"test-resource\\": {
              \\"name\\": \\"bar\\"
            }
          }
        }
      }"
    `);
    });
    test("using resource", () => {
        class MyResource extends constructs_1.Construct {
            constructor(scope, id) {
                super(scope, id);
                this.resource = new helper_1.TestResource(this, "test-resource", {
                    name: "bar",
                });
            }
        }
        expect(__1.Testing.synthScope((stack) => {
            const res = new MyResource(stack, "my-resource");
            new helper_1.TestResource(stack, "resource", {
                name: res.resource.stringValue,
            });
        })).toMatchInlineSnapshot(`
      "{
        \\"resource\\": {
          \\"test_resource\\": {
            \\"my-resource_test-resource_4F34504B\\": {
              \\"name\\": \\"bar\\"
            },
            \\"resource\\": {
              \\"name\\": \\"\${test_resource.my-resource_test-resource_4F34504B.string_value}\\"
            }
          }
        }
      }"
    `);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLGdDQUFtQztBQUNuQyxvREFBdUQ7QUFDdkQscUVBQXFFO0FBQ3JFLDJDQUF1QztBQUV2QyxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtRQUN6QixNQUFNLENBQ0osV0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzNCLElBQUksNEJBQWMsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQzVDLElBQUksRUFBRSxLQUFLO2FBQ1osQ0FBQyxDQUFDO1lBRUgsSUFBSSxxQkFBWSxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7Z0JBQ3ZDLElBQUksRUFBRSxLQUFLO2FBQ1osQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0gsQ0FBQyxxQkFBcUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FpQnZCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUMxQixNQUFNLFVBQVcsU0FBUSxzQkFBUztZQUdoQyxZQUFZLEtBQWdCLEVBQUUsRUFBVTtnQkFDdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFFakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHFCQUFZLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtvQkFDdEQsSUFBSSxFQUFFLEtBQUs7aUJBQ1osQ0FBQyxDQUFDO1lBQ0wsQ0FBQztTQUNGO1FBQ0QsTUFBTSxDQUNKLFdBQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMzQixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDakQsSUFBSSxxQkFBWSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7Z0JBQ2xDLElBQUksRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVc7YUFDL0IsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0gsQ0FBQyxxQkFBcUIsQ0FBQzs7Ozs7Ozs7Ozs7OztLQWF2QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IFRlc3RpbmcgfSBmcm9tIFwiLi4vLi4vLi5cIjtcbmltcG9ydCB7IFRlc3RSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi8uLi90ZXN0L2hlbHBlclwiO1xuaW1wb3J0IHsgVGVzdERhdGFTb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdGVzdC9oZWxwZXIvZGF0YS1zb3VyY2VcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5cbmRlc2NyaWJlKFwiI3N5bnRoU2NvcGVcIiwgKCkgPT4ge1xuICB0ZXN0KFwiYmFzaWMgZXhhbXBsZVwiLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgVGVzdGluZy5zeW50aFNjb3BlKChzdGFjaykgPT4ge1xuICAgICAgICBuZXcgVGVzdERhdGFTb3VyY2Uoc3RhY2ssIFwidGVzdC1kYXRhLXNvdXJjZVwiLCB7XG4gICAgICAgICAgbmFtZTogXCJmb29cIixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFRlc3RSZXNvdXJjZShzdGFjaywgXCJ0ZXN0LXJlc291cmNlXCIsIHtcbiAgICAgICAgICBuYW1lOiBcImJhclwiLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgXCJ7XG4gICAgICAgIFxcXFxcImRhdGFcXFxcXCI6IHtcbiAgICAgICAgICBcXFxcXCJ0ZXN0X2RhdGFfc291cmNlXFxcXFwiOiB7XG4gICAgICAgICAgICBcXFxcXCJ0ZXN0LWRhdGEtc291cmNlXFxcXFwiOiB7XG4gICAgICAgICAgICAgIFxcXFxcIm5hbWVcXFxcXCI6IFxcXFxcImZvb1xcXFxcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXFxcXFwicmVzb3VyY2VcXFxcXCI6IHtcbiAgICAgICAgICBcXFxcXCJ0ZXN0X3Jlc291cmNlXFxcXFwiOiB7XG4gICAgICAgICAgICBcXFxcXCJ0ZXN0LXJlc291cmNlXFxcXFwiOiB7XG4gICAgICAgICAgICAgIFxcXFxcIm5hbWVcXFxcXCI6IFxcXFxcImJhclxcXFxcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVwiXG4gICAgYCk7XG4gIH0pO1xuXG4gIHRlc3QoXCJ1c2luZyByZXNvdXJjZVwiLCAoKSA9PiB7XG4gICAgY2xhc3MgTXlSZXNvdXJjZSBleHRlbmRzIENvbnN0cnVjdCB7XG4gICAgICBwdWJsaWMgcmVzb3VyY2U6IFRlc3RSZXNvdXJjZTtcblxuICAgICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSBuZXcgVGVzdFJlc291cmNlKHRoaXMsIFwidGVzdC1yZXNvdXJjZVwiLCB7XG4gICAgICAgICAgbmFtZTogXCJiYXJcIixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGV4cGVjdChcbiAgICAgIFRlc3Rpbmcuc3ludGhTY29wZSgoc3RhY2spID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IE15UmVzb3VyY2Uoc3RhY2ssIFwibXktcmVzb3VyY2VcIik7XG4gICAgICAgIG5ldyBUZXN0UmVzb3VyY2Uoc3RhY2ssIFwicmVzb3VyY2VcIiwge1xuICAgICAgICAgIG5hbWU6IHJlcy5yZXNvdXJjZS5zdHJpbmdWYWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgIFwie1xuICAgICAgICBcXFxcXCJyZXNvdXJjZVxcXFxcIjoge1xuICAgICAgICAgIFxcXFxcInRlc3RfcmVzb3VyY2VcXFxcXCI6IHtcbiAgICAgICAgICAgIFxcXFxcIm15LXJlc291cmNlX3Rlc3QtcmVzb3VyY2VfNEYzNDUwNEJcXFxcXCI6IHtcbiAgICAgICAgICAgICAgXFxcXFwibmFtZVxcXFxcIjogXFxcXFwiYmFyXFxcXFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXFxcXFwicmVzb3VyY2VcXFxcXCI6IHtcbiAgICAgICAgICAgICAgXFxcXFwibmFtZVxcXFxcIjogXFxcXFwiXFwke3Rlc3RfcmVzb3VyY2UubXktcmVzb3VyY2VfdGVzdC1yZXNvdXJjZV80RjM0NTA0Qi5zdHJpbmdfdmFsdWV9XFxcXFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XCJcbiAgICBgKTtcbiAgfSk7XG59KTtcbiJdfQ==