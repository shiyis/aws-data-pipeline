export interface TerraformConstructor {
    readonly tfResourceType: string;
}
export declare type SynthesizedStack = {
    resource: Record<string, any>;
    data: Record<string, any>;
};
export declare class AssertionReturn {
    readonly message: string;
    readonly pass: boolean;
    constructor(message: string, pass: boolean);
}
export declare type MatcherReturnJest = {
    message: () => string;
    pass: boolean;
};
export declare function returnMatcherToJest(toReturn: AssertionReturn): MatcherReturnJest;
/**
 * Compares expected and received. All expected properties are matched and considered equal even if
 * there are more properties in the received object than in the expected object in which case it will still return true.
 * @param expected
 * @param received
 * @returns {boolean}
 */
export declare function asymetricDeepEqualIgnoringObjectCasing(expected: unknown, received: unknown): boolean;
export declare function getToHaveDataSourceWithProperties(customPassEvaluation?: (items: any, assertedProperties: Record<string, any>) => boolean): (received: string, resourceType: TerraformConstructor, properties?: Record<string, any>) => AssertionReturn;
export declare function getToHaveResourceWithProperties(customPassEvaluation?: (items: any, assertedProperties: Record<string, any>) => boolean): (received: string, resourceType: TerraformConstructor, properties?: Record<string, any>) => AssertionReturn;
export declare function toBeValidTerraform(received: string): AssertionReturn;
export declare function toPlanSuccessfully(received: string): AssertionReturn;
