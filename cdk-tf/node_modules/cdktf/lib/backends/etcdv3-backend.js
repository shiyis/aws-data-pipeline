"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateEtcdV3 = exports.EtcdV3Backend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class EtcdV3Backend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "etcdv3");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateEtcdV3(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.EtcdV3Backend = EtcdV3Backend;
_a = JSII_RTTI_SYMBOL_1;
EtcdV3Backend[_a] = { fqn: "cdktf.EtcdV3Backend", version: "0.13.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateEtcdV3 extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "etcdv3", config);
    }
}
exports.DataTerraformRemoteStateEtcdV3 = DataTerraformRemoteStateEtcdV3;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateEtcdV3[_b] = { fqn: "cdktf.DataTerraformRemoteStateEtcdV3", version: "0.13.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRjZHYzLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJldGNkdjMtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DLCtDQUErQztBQUMvQyxNQUFhLGFBQWMsU0FBUSxvQ0FBZ0I7SUFDakQsWUFBWSxLQUFnQixFQUFtQixLQUF5QjtRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQW9CO0lBRXhFLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxzQkFBZSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sd0JBQXdCLENBQzdCLEtBQWdCLEVBQ2hCLElBQVksRUFDWixVQUFrQjtRQUVsQixPQUFPLElBQUksOEJBQThCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtZQUNyRCxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQ2IsU0FBUyxFQUFFLHdCQUF3QjtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQWxCSCxzQ0FtQkM7OztBQUVELCtDQUErQztBQUMvQyxNQUFhLDhCQUErQixTQUFRLDZDQUFvQjtJQUN0RSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUE0QztRQUU1QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7QUFQSCx3RUFRQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtQmFja2VuZCB9IGZyb20gXCIuLi90ZXJyYWZvcm0tYmFja2VuZFwiO1xuaW1wb3J0IHsga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybVJlbW90ZVN0YXRlLFxuICBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG59IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgRXRjZFYzQmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBFdGNkVjNCYWNrZW5kUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgXCJiYWNrZW5kXCIsIFwiZXRjZHYzXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZW1vdGVTdGF0ZURhdGFTb3VyY2UoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgX2Zyb21TdGFjazogc3RyaW5nXG4gICk6IFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgICByZXR1cm4gbmV3IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUV0Y2RWMyhzY29wZSwgbmFtZSwge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIHdvcmtzcGFjZTogXCIke3RlcnJhZm9ybS53b3Jrc3BhY2V9XCIsXG4gICAgfSk7XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVFdGNkVjMgZXh0ZW5kcyBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUV0Y2RWM0NvbmZpZ1xuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIFwiZXRjZHYzXCIsIGNvbmZpZyk7XG4gIH1cbn1cbi8qKlxuICogU3RvcmVzIHRoZSBzdGF0ZSBpbiB0aGUgZXRjZCBLViBzdG9yZSB3aXRoIGEgZ2l2ZW4gcHJlZml4LlxuICpcbiAqIFRoaXMgYmFja2VuZCBzdXBwb3J0cyBzdGF0ZSBsb2NraW5nLlxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB0aGlzIGJhY2tlbmQgaW4gdGhlIFRlcnJhZm9ybSBkb2NzOlxuICogaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2xhbmd1YWdlL3NldHRpbmdzL2JhY2tlbmRzL2V0Y2R2M1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEV0Y2RWM0JhY2tlbmRQcm9wcyB7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIFRoZSBsaXN0IG9mICdldGNkJyBlbmRwb2ludHMgd2hpY2ggdG8gY29ubmVjdCB0by5cbiAgICovXG4gIHJlYWRvbmx5IGVuZHBvaW50czogc3RyaW5nW107XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFVzZXJuYW1lIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgZXRjZCBjbHVzdGVyLlxuICAgKi9cbiAgcmVhZG9ubHkgdXNlcm5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAgKE9wdGlvbmFsKSBQYXNzd29yZCB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIGV0Y2QgY2x1c3Rlci5cbiAgICovXG4gIHJlYWRvbmx5IHBhc3N3b3JkPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBbiBvcHRpb25hbCBwcmVmaXggdG8gYmUgYWRkZWQgdG8ga2V5cyB3aGVuIHRvIHN0b3Jpbmcgc3RhdGUgaW4gZXRjZC5cbiAgICogRGVmYXVsdHMgdG8gXCJcIi5cbiAgICovXG4gIHJlYWRvbmx5IHByZWZpeD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgV2hldGhlciB0byBsb2NrIHN0YXRlIGFjY2Vzcy4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICovXG4gIHJlYWRvbmx5IGxvY2s/OiBib29sZWFuO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgcGF0aCB0byBhIFBFTS1lbmNvZGVkIENBIGJ1bmRsZVxuICAgKiB3aXRoIHdoaWNoIHRvIHZlcmlmeSBjZXJ0aWZpY2F0ZXMgb2YgVExTLWVuYWJsZWQgZXRjZCBzZXJ2ZXJzLlxuICAgKi9cbiAgcmVhZG9ubHkgY2FjZXJ0UGF0aD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBjZXJ0aWZpY2F0ZSB0byBwcm92aWRlIHRvIGV0Y2RcbiAgICogZm9yIHNlY3VyZSBjbGllbnQgaWRlbnRpZmljYXRpb24uXG4gICAqL1xuICByZWFkb25seSBjZXJ0UGF0aD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBrZXkgdG8gcHJvdmlkZSB0byBldGNkIGZvciBzZWN1cmUgY2xpZW50IGlkZW50aWZpY2F0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkga2V5UGF0aD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVFdGNkVjNDb25maWdcbiAgZXh0ZW5kcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG4gICAgRXRjZFYzQmFja2VuZFByb3BzIHt9XG4iXX0=