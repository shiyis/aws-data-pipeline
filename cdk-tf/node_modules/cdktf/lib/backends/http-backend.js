"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateHttp = exports.HttpBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class HttpBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "http");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateHttp(scope, name, this.props);
    }
}
exports.HttpBackend = HttpBackend;
_a = JSII_RTTI_SYMBOL_1;
HttpBackend[_a] = { fqn: "cdktf.HttpBackend", version: "0.13.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateHttp extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "http", config);
    }
}
exports.DataTerraformRemoteStateHttp = DataTerraformRemoteStateHttp;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateHttp[_b] = { fqn: "cdktf.DataTerraformRemoteStateHttp", version: "0.13.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1iYWNrZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cC1iYWNrZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsNERBQXdEO0FBQ3hELGtDQUEwQztBQUMxQyxzRUFHbUM7QUFFbkMsK0NBQStDO0FBQy9DLE1BQWEsV0FBWSxTQUFRLG9DQUFnQjtJQUMvQyxZQUFZLEtBQWdCLEVBQW1CLEtBQXVCO1FBQ3BFLEtBQUssQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRGEsVUFBSyxHQUFMLEtBQUssQ0FBa0I7SUFFdEUsQ0FBQztJQUVTLG9CQUFvQjtRQUM1QixPQUFPLHNCQUFlLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSx3QkFBd0IsQ0FDN0IsS0FBZ0IsRUFDaEIsSUFBWSxFQUNaLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSw0QkFBNEIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDOztBQWZILGtDQWdCQzs7O0FBRUQsK0NBQStDO0FBQy9DLE1BQWEsNEJBQTZCLFNBQVEsNkNBQW9CO0lBQ3BFLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE1BQTBDO1FBRTFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDOztBQVBILG9FQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBIdHRwQmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBIdHRwQmFja2VuZFByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIFwiYmFja2VuZFwiLCBcImh0dHBcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiBrZXlzVG9TbmFrZUNhc2UoeyAuLi50aGlzLnByb3BzIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFJlbW90ZVN0YXRlRGF0YVNvdXJjZShcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBfZnJvbVN0YWNrOiBzdHJpbmdcbiAgKTogVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICAgIHJldHVybiBuZXcgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlSHR0cChzY29wZSwgbmFtZSwgdGhpcy5wcm9wcyk7XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVIdHRwIGV4dGVuZHMgVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVIdHRwQ29uZmlnXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgXCJodHRwXCIsIGNvbmZpZyk7XG4gIH1cbn1cbi8qKlxuICogU3RvcmVzIHRoZSBzdGF0ZSB1c2luZyBhIHNpbXBsZSBSRVNUIGNsaWVudC5cbiAqXG4gKiBTdGF0ZSB3aWxsIGJlIGZldGNoZWQgdmlhIEdFVCwgdXBkYXRlZCB2aWEgUE9TVCwgYW5kIHB1cmdlZCB3aXRoIERFTEVURS5cbiAqIFRoZSBtZXRob2QgdXNlZCBmb3IgdXBkYXRpbmcgaXMgY29uZmlndXJhYmxlLlxuICpcbiAqIFRoaXMgYmFja2VuZCBvcHRpb25hbGx5IHN1cHBvcnRzIHN0YXRlIGxvY2tpbmcuXG4gKiBXaGVuIGxvY2tpbmcgc3VwcG9ydCBpcyBlbmFibGVkIGl0IHdpbGwgdXNlIExPQ0sgYW5kIFVOTE9DSyByZXF1ZXN0cyBwcm92aWRpbmcgdGhlIGxvY2sgaW5mbyBpbiB0aGUgYm9keS5cbiAqIFRoZSBlbmRwb2ludCBzaG91bGQgcmV0dXJuIGEgNDIzOiBMb2NrZWQgb3IgNDA5OiBDb25mbGljdCB3aXRoIHRoZSBob2xkaW5nIGxvY2sgaW5mbyB3aGVuXG4gKiBpdCdzIGFscmVhZHkgdGFrZW4sIDIwMDogT0sgZm9yIHN1Y2Nlc3MuIEFueSBvdGhlciBzdGF0dXMgd2lsbCBiZSBjb25zaWRlcmVkIGFuIGVycm9yLlxuICogVGhlIElEIG9mIHRoZSBob2xkaW5nIGxvY2sgaW5mbyB3aWxsIGJlIGFkZGVkIGFzIGEgcXVlcnkgcGFyYW1ldGVyIHRvIHN0YXRlIHVwZGF0ZXMgcmVxdWVzdHMuXG4gKlxuICogUmVhZCBtb3JlIGFib3V0IHRoaXMgYmFja2VuZCBpbiB0aGUgVGVycmFmb3JtIGRvY3M6XG4gKiBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vbGFuZ3VhZ2Uvc2V0dGluZ3MvYmFja2VuZHMvaHR0cFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBCYWNrZW5kUHJvcHMge1xuICAvKipcbiAgICogKFJlcXVpcmVkKSBUaGUgYWRkcmVzcyBvZiB0aGUgUkVTVCBlbmRwb2ludFxuICAgKi9cbiAgcmVhZG9ubHkgYWRkcmVzczogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBIVFRQIG1ldGhvZCB0byB1c2Ugd2hlbiB1cGRhdGluZyBzdGF0ZS4gRGVmYXVsdHMgdG8gUE9TVC5cbiAgICovXG4gIHJlYWRvbmx5IHVwZGF0ZU1ldGhvZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIGFkZHJlc3Mgb2YgdGhlIGxvY2sgUkVTVCBlbmRwb2ludC4gRGVmYXVsdHMgdG8gZGlzYWJsZWQuXG4gICAqL1xuICByZWFkb25seSBsb2NrQWRkcmVzcz86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIEhUVFAgbWV0aG9kIHRvIHVzZSB3aGVuIGxvY2tpbmcuIERlZmF1bHRzIHRvIExPQ0suXG4gICAqL1xuICByZWFkb25seSBsb2NrTWV0aG9kPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgYWRkcmVzcyBvZiB0aGUgdW5sb2NrIFJFU1QgZW5kcG9pbnQuIERlZmF1bHRzIHRvIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgdW5sb2NrQWRkcmVzcz86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIEhUVFAgbWV0aG9kIHRvIHVzZSB3aGVuIHVubG9ja2luZy4gRGVmYXVsdHMgdG8gVU5MT0NLLlxuICAgKi9cbiAgcmVhZG9ubHkgdW5sb2NrTWV0aG9kPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgdXNlcm5hbWUgZm9yIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IHVzZXJuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgcGFzc3dvcmQgZm9yIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IHBhc3N3b3JkPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBXaGV0aGVyIHRvIHNraXAgVExTIHZlcmlmaWNhdGlvbi4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqL1xuICByZWFkb25seSBza2lwQ2VydFZlcmlmaWNhdGlvbj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBudW1iZXIgb2YgSFRUUCByZXF1ZXN0IHJldHJpZXMuIERlZmF1bHRzIHRvIDIuXG4gICAqL1xuICByZWFkb25seSByZXRyeU1heD86IG51bWJlcjtcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIG1pbmltdW0gdGltZSBpbiBzZWNvbmRzIHRvIHdhaXQgYmV0d2VlbiBIVFRQIHJlcXVlc3QgYXR0ZW1wdHMuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICByZWFkb25seSByZXRyeVdhaXRNaW4/OiBudW1iZXI7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBtYXhpbXVtIHRpbWUgaW4gc2Vjb25kcyB0byB3YWl0IGJldHdlZW4gSFRUUCByZXF1ZXN0IGF0dGVtcHRzLiBEZWZhdWx0cyB0byAzMC5cbiAgICovXG4gIHJlYWRvbmx5IHJldHJ5V2FpdE1heD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVIdHRwQ29uZmlnXG4gIGV4dGVuZHMgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxuICAgIEh0dHBCYWNrZW5kUHJvcHMge31cbiJdfQ==