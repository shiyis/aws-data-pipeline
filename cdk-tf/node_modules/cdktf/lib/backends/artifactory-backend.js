"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateArtifactory = exports.ArtifactoryBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class ArtifactoryBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "artifactory");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateArtifactory(scope, name, this.props);
    }
}
exports.ArtifactoryBackend = ArtifactoryBackend;
_a = JSII_RTTI_SYMBOL_1;
ArtifactoryBackend[_a] = { fqn: "cdktf.ArtifactoryBackend", version: "0.13.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateArtifactory extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "artifactory", config);
    }
}
exports.DataTerraformRemoteStateArtifactory = DataTerraformRemoteStateArtifactory;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateArtifactory[_b] = { fqn: "cdktf.DataTerraformRemoteStateArtifactory", version: "0.13.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3RvcnktYmFja2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFydGlmYWN0b3J5LWJhY2tlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSw0REFBd0Q7QUFDeEQsa0NBQTBDO0FBQzFDLHNFQUdtQztBQUVuQywrQ0FBK0M7QUFDL0MsTUFBYSxrQkFBbUIsU0FBUSxvQ0FBZ0I7SUFDdEQsWUFDRSxLQUFnQixFQUNDLEtBQThCO1FBRS9DLEtBQUssQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRnRCLFVBQUssR0FBTCxLQUFLLENBQXlCO0lBR2pELENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxzQkFBZSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sd0JBQXdCLENBQzdCLEtBQWdCLEVBQ2hCLElBQVksRUFDWixVQUFrQjtRQUVsQixPQUFPLElBQUksbUNBQW1DLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7QUFsQkgsZ0RBbUJDOzs7QUFFRCwrQ0FBK0M7QUFDL0MsTUFBYSxtQ0FBb0MsU0FBUSw2Q0FBb0I7SUFDM0UsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsTUFBaUQ7UUFFakQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7O0FBUEgsa0ZBUUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IFRlcnJhZm9ybUJhY2tlbmQgfSBmcm9tIFwiLi4vdGVycmFmb3JtLWJhY2tlbmRcIjtcbmltcG9ydCB7IGtleXNUb1NuYWtlQ2FzZSB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQge1xuICBUZXJyYWZvcm1SZW1vdGVTdGF0ZSxcbiAgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxufSBmcm9tIFwiLi4vdGVycmFmb3JtLXJlbW90ZS1zdGF0ZVwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuZXhwb3J0IGNsYXNzIEFydGlmYWN0b3J5QmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEFydGlmYWN0b3J5QmFja2VuZFByb3BzXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBcImJhY2tlbmRcIiwgXCJhcnRpZmFjdG9yeVwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZ1xuICApOiBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVBcnRpZmFjdG9yeShzY29wZSwgbmFtZSwgdGhpcy5wcm9wcyk7XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVBcnRpZmFjdG9yeSBleHRlbmRzIFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGNvbmZpZzogRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQXJ0aWZhY3RvcnlDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcImFydGlmYWN0b3J5XCIsIGNvbmZpZyk7XG4gIH1cbn1cbi8qKlxuICogU3RvcmVzIHRoZSBzdGF0ZSBhcyBhbiBhcnRpZmFjdCBpbiBhIGdpdmVuIHJlcG9zaXRvcnkgaW4gQXJ0aWZhY3RvcnkuXG4gKiBHZW5lcmljIEhUVFAgcmVwb3NpdG9yaWVzIGFyZSBzdXBwb3J0ZWQsIGFuZCBzdGF0ZSBmcm9tIGRpZmZlcmVudCBjb25maWd1cmF0aW9uc1xuICogbWF5IGJlIGtlcHQgYXQgZGlmZmVyZW50IHN1YnBhdGhzIHdpdGhpbiB0aGUgcmVwb3NpdG9yeS5cbiAqXG4gKiBOb3RlOiBUaGUgVVJMIG11c3QgaW5jbHVkZSB0aGUgcGF0aCB0byB0aGUgQXJ0aWZhY3RvcnkgaW5zdGFsbGF0aW9uLlxuICogSXQgd2lsbCBsaWtlbHkgZW5kIGluIC9hcnRpZmFjdG9yeS5cbiAqXG4gKiBUaGlzIGJhY2tlbmQgZG9lcyBub3Qgc3VwcG9ydCBzdGF0ZSBsb2NraW5nLlxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB0aGlzIGJhY2tlbmQgaW4gdGhlIFRlcnJhZm9ybSBkb2NzOlxuICogaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2xhbmd1YWdlL3NldHRpbmdzL2JhY2tlbmRzL2FydGlmYWN0b3J5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXJ0aWZhY3RvcnlCYWNrZW5kUHJvcHMge1xuICAvKipcbiAgICogKFJlcXVpcmVkKSAtIFRoZSB1c2VybmFtZVxuICAgKi9cbiAgcmVhZG9ubHkgdXNlcm5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgLSBUaGUgcGFzc3dvcmRcbiAgICovXG4gIHJlYWRvbmx5IHBhc3N3b3JkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIC0gVGhlIFVSTC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgdGhlIGJhc2UgdXJsIHRvIGFydGlmYWN0b3J5IG5vdCB0aGUgZnVsbCByZXBvIGFuZCBzdWJwYXRoLlxuICAgKi9cbiAgcmVhZG9ubHkgdXJsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIC0gVGhlIHJlcG9zaXRvcnkgbmFtZVxuICAgKi9cbiAgcmVhZG9ubHkgcmVwbzogc3RyaW5nO1xuICAvKipcbiAgICogKFJlcXVpcmVkKSAtIFBhdGggd2l0aGluIHRoZSByZXBvc2l0b3J5XG4gICAqL1xuICByZWFkb25seSBzdWJwYXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQXJ0aWZhY3RvcnlDb25maWdcbiAgZXh0ZW5kcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG4gICAgQXJ0aWZhY3RvcnlCYWNrZW5kUHJvcHMge31cbiJdfQ==