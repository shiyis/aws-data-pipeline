"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateGcs = exports.GcsBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class GcsBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "gcs");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateGcs(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.GcsBackend = GcsBackend;
_a = JSII_RTTI_SYMBOL_1;
GcsBackend[_a] = { fqn: "cdktf.GcsBackend", version: "0.13.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateGcs extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "gcs", config);
    }
}
exports.DataTerraformRemoteStateGcs = DataTerraformRemoteStateGcs;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateGcs[_b] = { fqn: "cdktf.DataTerraformRemoteStateGcs", version: "0.13.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2NzLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnY3MtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DLCtDQUErQztBQUMvQyxNQUFhLFVBQVcsU0FBUSxvQ0FBZ0I7SUFDOUMsWUFBWSxLQUFnQixFQUFtQixLQUFzQjtRQUNuRSxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQURjLFVBQUssR0FBTCxLQUFLLENBQWlCO0lBRXJFLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxzQkFBZSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sd0JBQXdCLENBQzdCLEtBQWdCLEVBQ2hCLElBQVksRUFDWixVQUFrQjtRQUVsQixPQUFPLElBQUksMkJBQTJCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtZQUNsRCxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQ2IsU0FBUyxFQUFFLHdCQUF3QjtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQWxCSCxnQ0FtQkM7OztBQUVELCtDQUErQztBQUMvQyxNQUFhLDJCQUE0QixTQUFRLDZDQUFvQjtJQUNuRSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUF5QztRQUV6QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7QUFQSCxrRUFRQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtQmFja2VuZCB9IGZyb20gXCIuLi90ZXJyYWZvcm0tYmFja2VuZFwiO1xuaW1wb3J0IHsga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybVJlbW90ZVN0YXRlLFxuICBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG59IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgR2NzQmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBHY3NCYWNrZW5kUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgXCJiYWNrZW5kXCIsIFwiZ2NzXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZW1vdGVTdGF0ZURhdGFTb3VyY2UoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgX2Zyb21TdGFjazogc3RyaW5nXG4gICk6IFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgICByZXR1cm4gbmV3IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUdjcyhzY29wZSwgbmFtZSwge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIHdvcmtzcGFjZTogXCIke3RlcnJhZm9ybS53b3Jrc3BhY2V9XCIsXG4gICAgfSk7XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVHY3MgZXh0ZW5kcyBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUdjc0NvbmZpZ1xuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIFwiZ2NzXCIsIGNvbmZpZyk7XG4gIH1cbn1cbi8qKlxuICogU3RvcmVzIHRoZSBzdGF0ZSBhcyBhbiBvYmplY3QgaW4gYSBjb25maWd1cmFibGUgcHJlZml4IGluIGEgcHJlLWV4aXN0aW5nIGJ1Y2tldFxuICogb24gR29vZ2xlIENsb3VkIFN0b3JhZ2UgKEdDUykuIFRoZSBidWNrZXQgbXVzdCBleGlzdCBwcmlvciB0byBjb25maWd1cmluZyB0aGUgYmFja2VuZC5cbiAqXG4gKiBUaGlzIGJhY2tlbmQgc3VwcG9ydHMgc3RhdGUgbG9ja2luZy5cbiAqXG4gKiBXYXJuaW5nISBJdCBpcyBoaWdobHkgcmVjb21tZW5kZWQgdGhhdCB5b3UgZW5hYmxlIE9iamVjdCBWZXJzaW9uaW5nIG9uIHRoZSBHQ1MgYnVja2V0XG4gKiB0byBhbGxvdyBmb3Igc3RhdGUgcmVjb3ZlcnkgaW4gdGhlIGNhc2Ugb2YgYWNjaWRlbnRhbCBkZWxldGlvbnMgYW5kIGh1bWFuIGVycm9yLlxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB0aGlzIGJhY2tlbmQgaW4gdGhlIFRlcnJhZm9ybSBkb2NzOlxuICogaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2xhbmd1YWdlL3NldHRpbmdzL2JhY2tlbmRzL2djc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEdjc0JhY2tlbmRQcm9wcyB7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIFRoZSBuYW1lIG9mIHRoZSBHQ1MgYnVja2V0LiBUaGlzIG5hbWUgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUuXG4gICAqL1xuICByZWFkb25seSBidWNrZXQ6IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgTG9jYWwgcGF0aCB0byBHb29nbGUgQ2xvdWQgUGxhdGZvcm0gYWNjb3VudCBjcmVkZW50aWFscyBpbiBKU09OIGZvcm1hdC5cbiAgICogSWYgdW5zZXQsIEdvb2dsZSBBcHBsaWNhdGlvbiBEZWZhdWx0IENyZWRlbnRpYWxzIGFyZSB1c2VkLlxuICAgKiBUaGUgcHJvdmlkZWQgY3JlZGVudGlhbHMgbXVzdCBoYXZlIFN0b3JhZ2UgT2JqZWN0IEFkbWluIHJvbGUgb24gdGhlIGJ1Y2tldC5cbiAgICpcbiAgICogV2FybmluZzogaWYgdXNpbmcgdGhlIEdvb2dsZSBDbG91ZCBQbGF0Zm9ybSBwcm92aWRlciBhcyB3ZWxsLFxuICAgKiBpdCB3aWxsIGFsc28gcGljayB1cCB0aGUgR09PR0xFX0NSRURFTlRJQUxTIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICAgKi9cbiAgcmVhZG9ubHkgY3JlZGVudGlhbHM/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgdGVtcG9yYXJ5IFtPQXV0aCAyLjAgYWNjZXNzIHRva2VuXSBvYnRhaW5lZCBmcm9tIHRoZSBHb29nbGUgQXV0aG9yaXphdGlvbiBzZXJ2ZXIsXG4gICAqIGkuZS4gdGhlIEF1dGhvcml6YXRpb246IEJlYXJlciB0b2tlbiB1c2VkIHRvIGF1dGhlbnRpY2F0ZSBIVFRQIHJlcXVlc3RzIHRvIEdDUCBBUElzLlxuICAgKiBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIGNyZWRlbnRpYWxzLlxuICAgKiBJZiBib3RoIGFyZSBzcGVjaWZpZWQsIGFjY2Vzc190b2tlbiB3aWxsIGJlIHVzZWQgb3ZlciB0aGUgY3JlZGVudGlhbHMgZmllbGQuXG4gICAqL1xuICByZWFkb25seSBhY2Nlc3NUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgR0NTIHByZWZpeCBpbnNpZGUgdGhlIGJ1Y2tldC5cbiAgICogTmFtZWQgc3RhdGVzIGZvciB3b3Jrc3BhY2VzIGFyZSBzdG9yZWQgaW4gYW4gb2JqZWN0IGNhbGxlZCA8cHJlZml4Pi88bmFtZT4udGZzdGF0ZS5cbiAgICovXG4gIHJlYWRvbmx5IHByZWZpeD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgQSAzMiBieXRlIGJhc2U2NCBlbmNvZGVkICdjdXN0b21lciBzdXBwbGllZCBlbmNyeXB0aW9uIGtleScgdXNlZCB0byBlbmNyeXB0IGFsbCBzdGF0ZS5cbiAgICovXG4gIHJlYWRvbmx5IGVuY3J5cHRpb25LZXk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBzZXJ2aWNlIGFjY291bnQgdG8gaW1wZXJzb25hdGUgZm9yIGFjY2Vzc2luZyB0aGUgU3RhdGUgQnVja2V0LlxuICAgKiBZb3UgbXVzdCBoYXZlIHJvbGVzL2lhbS5zZXJ2aWNlQWNjb3VudFRva2VuQ3JlYXRvciByb2xlIG9uIHRoYXQgYWNjb3VudCBmb3IgdGhlIGltcGVyc29uYXRpb24gdG8gc3VjY2VlZC5cbiAgICogSWYgeW91IGFyZSB1c2luZyBhIGRlbGVnYXRpb24gY2hhaW4sIHlvdSBjYW4gc3BlY2lmeSB0aGF0IHVzaW5nIHRoZSBpbXBlcnNvbmF0ZV9zZXJ2aWNlX2FjY291bnRfZGVsZWdhdGVzIGZpZWxkLlxuICAgKiBBbHRlcm5hdGl2ZWx5LCB0aGlzIGNhbiBiZSBzcGVjaWZpZWQgdXNpbmcgdGhlIEdPT0dMRV9JTVBFUlNPTkFURV9TRVJWSUNFX0FDQ09VTlQgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqL1xuICByZWFkb25seSBpbXBlcnNvbmF0ZVNlcnZpY2VBY2NvdW50Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgZGVsZWdhdGlvbiBjaGFpbiBmb3IgYW4gaW1wZXJzb25hdGluZyBhIHNlcnZpY2UgYWNjb3VudFxuICAgKi9cbiAgcmVhZG9ubHkgaW1wZXJzb25hdGVTZXJ2aWNlQWNjb3VudERlbGVnYXRlcz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUdjc0NvbmZpZ1xuICBleHRlbmRzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbiAgICBHY3NCYWNrZW5kUHJvcHMge31cbiJdfQ==