"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateConsul = exports.ConsulBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class ConsulBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "consul");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateConsul(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.ConsulBackend = ConsulBackend;
_a = JSII_RTTI_SYMBOL_1;
ConsulBackend[_a] = { fqn: "cdktf.ConsulBackend", version: "0.13.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateConsul extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "consul", config);
    }
}
exports.DataTerraformRemoteStateConsul = DataTerraformRemoteStateConsul;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateConsul[_b] = { fqn: "cdktf.DataTerraformRemoteStateConsul", version: "0.13.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3VsLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb25zdWwtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DLCtDQUErQztBQUMvQyxNQUFhLGFBQWMsU0FBUSxvQ0FBZ0I7SUFDakQsWUFBWSxLQUFnQixFQUFtQixLQUF5QjtRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQW9CO0lBRXhFLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxzQkFBZSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sd0JBQXdCLENBQzdCLEtBQWdCLEVBQ2hCLElBQVksRUFDWixVQUFrQjtRQUVsQixPQUFPLElBQUksOEJBQThCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtZQUNyRCxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQ2IsU0FBUyxFQUFFLHdCQUF3QjtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQWxCSCxzQ0FtQkM7OztBQUVELCtDQUErQztBQUMvQyxNQUFhLDhCQUErQixTQUFRLDZDQUFvQjtJQUN0RSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUE0QztRQUU1QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7QUFQSCx3RUFRQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtQmFja2VuZCB9IGZyb20gXCIuLi90ZXJyYWZvcm0tYmFja2VuZFwiO1xuaW1wb3J0IHsga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybVJlbW90ZVN0YXRlLFxuICBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG59IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgQ29uc3VsQmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBDb25zdWxCYWNrZW5kUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgXCJiYWNrZW5kXCIsIFwiY29uc3VsXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZW1vdGVTdGF0ZURhdGFTb3VyY2UoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgX2Zyb21TdGFjazogc3RyaW5nXG4gICk6IFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgICByZXR1cm4gbmV3IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbnN1bChzY29wZSwgbmFtZSwge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIHdvcmtzcGFjZTogXCIke3RlcnJhZm9ybS53b3Jrc3BhY2V9XCIsXG4gICAgfSk7XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25zdWwgZXh0ZW5kcyBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbnN1bENvbmZpZ1xuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIFwiY29uc3VsXCIsIGNvbmZpZyk7XG4gIH1cbn1cbi8qKlxuICogU3RvcmVzIHRoZSBzdGF0ZSBpbiB0aGUgQ29uc3VsIEtWIHN0b3JlIGF0IGEgZ2l2ZW4gcGF0aC5cbiAqIFRoaXMgYmFja2VuZCBzdXBwb3J0cyBzdGF0ZSBsb2NraW5nLlxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB0aGlzIGJhY2tlbmQgaW4gdGhlIFRlcnJhZm9ybSBkb2NzOlxuICogaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2xhbmd1YWdlL3NldHRpbmdzL2JhY2tlbmRzL2NvbnN1bFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnN1bEJhY2tlbmRQcm9wcyB7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIFBhdGggaW4gdGhlIENvbnN1bCBLViBzdG9yZVxuICAgKi9cbiAgcmVhZG9ubHkgcGF0aDogc3RyaW5nO1xuICAvKipcbiAgICogKFJlcXVpcmVkKSBBY2Nlc3MgdG9rZW5cbiAgICovXG4gIHJlYWRvbmx5IGFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEROUyBuYW1lIGFuZCBwb3J0IG9mIHlvdXIgQ29uc3VsIGVuZHBvaW50IHNwZWNpZmllZCBpbiB0aGUgZm9ybWF0IGRuc25hbWU6cG9ydC5cbiAgICogIERlZmF1bHRzIHRvIHRoZSBsb2NhbCBhZ2VudCBIVFRQIGxpc3RlbmVyLlxuICAgKi9cbiAgcmVhZG9ubHkgYWRkcmVzcz86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgU3BlY2lmaWVzIHdoYXQgcHJvdG9jb2wgdG8gdXNlIHdoZW4gdGFsa2luZyB0byB0aGUgZ2l2ZW4gYWRkcmVzcyxlaXRoZXIgaHR0cCBvciBodHRwcy5cbiAgICogU1NMIHN1cHBvcnQgY2FuIGFsc28gYmUgdHJpZ2dlcmVkIGJ5IHNldHRpbmcgdGhlbiBlbnZpcm9ubWVudCB2YXJpYWJsZSBDT05TVUxfSFRUUF9TU0wgdG8gdHJ1ZS5cbiAgICovXG4gIHJlYWRvbmx5IHNjaGVtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIGRhdGFjZW50ZXIgdG8gdXNlLiBEZWZhdWx0cyB0byB0aGF0IG9mIHRoZSBhZ2VudC5cbiAgICovXG4gIHJlYWRvbmx5IGRhdGFjZW50ZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEhUVFAgQmFzaWMgQXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgdG8gYmUgdXNlZCB3aGVuIGNvbW11bmljYXRpbmcgd2l0aCBDb25zdWwsXG4gICAqIGluIHRoZSBmb3JtYXQgb2YgZWl0aGVyIHVzZXIgb3IgdXNlcjpwYXNzLlxuICAgKi9cbiAgcmVhZG9ubHkgaHR0cEF1dGg/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIHRydWUgdG8gY29tcHJlc3MgdGhlIHN0YXRlIGRhdGEgdXNpbmcgZ3ppcCxcbiAgICogb3IgZmFsc2UgKHRoZSBkZWZhdWx0KSB0byBsZWF2ZSBpdCB1bmNvbXByZXNzZWQuXG4gICAqL1xuICByZWFkb25seSBnemlwPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgZmFsc2UgdG8gZGlzYWJsZSBsb2NraW5nLlxuICAgKiBUaGlzIGRlZmF1bHRzIHRvIHRydWUsIGJ1dCB3aWxsIHJlcXVpcmUgc2Vzc2lvbiBwZXJtaXNzaW9ucyB3aXRoIENvbnN1bCBhbmRcbiAgICogYXQgbGVhc3Qga3Ygd3JpdGUgcGVybWlzc2lvbnMgb24gJHBhdGgvLmxvY2sgdG8gcGVyZm9ybSBsb2NraW5nLlxuICAgKi9cbiAgcmVhZG9ubHkgbG9jaz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgcGF0aCB0byBhIFBFTS1lbmNvZGVkIGNlcnRpZmljYXRlIGF1dGhvcml0eVxuICAgKiB1c2VkIHRvIHZlcmlmeSB0aGUgcmVtb3RlIGFnZW50J3MgY2VydGlmaWNhdGUuXG4gICAqL1xuICByZWFkb25seSBjYUZpbGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgcGF0aCB0byBhIFBFTS1lbmNvZGVkIGNlcnRpZmljYXRlIHByb3ZpZGVkIHRvIHRoZSByZW1vdGUgYWdlbnQ7XG4gICAqIHJlcXVpcmVzIHVzZSBvZiBrZXlfZmlsZS5cbiAgICovXG4gIHJlYWRvbmx5IGNlcnRGaWxlPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBwcml2YXRlIGtleSwgcmVxdWlyZWQgaWYgY2VydF9maWxlIGlzIHNwZWNpZmllZC5cbiAgICovXG4gIHJlYWRvbmx5IGtleUZpbGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uc3VsQ29uZmlnXG4gIGV4dGVuZHMgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxuICAgIENvbnN1bEJhY2tlbmRQcm9wcyB7fVxuIl19