"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateProviderPresence = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const constructs_1 = require("constructs");
const terraform_provider_1 = require("../terraform-provider");
const terraform_resource_1 = require("../terraform-resource");
const terraform_data_source_1 = require("../terraform-data-source");
/**
 * A validation that is added by default, ensuring that all providers
 * used are defined via Constructs.
 */
class ValidateProviderPresence {
    /**
     * Creates a ValidateProviderPresence
     */
    constructor(host) {
        this.host = host;
        /**
         * All provider names found in the construct tree.
         */
        this.providerNames = new Set();
        /**
         * All TerraformProviders found in the construct tree.
         */
        this.foundProviders = [];
    }
    /**
     * Checks the construct tree recursively
     */
    check(node) {
        if (node instanceof terraform_resource_1.TerraformResource ||
            node instanceof terraform_data_source_1.TerraformDataSource) {
            if (node.terraformGeneratorMetadata) {
                this.providerNames.add(node.terraformGeneratorMetadata.providerName);
            }
        }
        if (node instanceof terraform_provider_1.TerraformProvider) {
            this.foundProviders.push(node);
        }
        for (const child of constructs_1.Node.of(node).children) {
            this.check(child);
        }
    }
    /**
     * Run the validation
     */
    validate() {
        this.check(this.host);
        const missingProviders = Array.from(this.providerNames).filter((name) => {
            return !this.foundProviders.some((p) => p.terraformGeneratorMetadata?.providerName === name);
        });
        if (missingProviders.length === 0) {
            return [];
        }
        else {
            return [
                `Found resources without a matching provider construct. Please make sure to add provider constructs [e.g. new RandomProvider(...)] to your stack for the following providers: ${missingProviders.join(", ")}`,
            ];
        }
    }
}
exports.ValidateProviderPresence = ValidateProviderPresence;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtcHJvdmlkZXItcHJlc2VuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2YWxpZGF0ZS1wcm92aWRlci1wcmVzZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLDJDQUEyRDtBQUMzRCw4REFBMEQ7QUFDMUQsOERBQTBEO0FBQzFELG9FQUErRDtBQUUvRDs7O0dBR0c7QUFDSCxNQUFhLHdCQUF3QjtJQVVuQzs7T0FFRztJQUNILFlBQXNCLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFadEM7O1dBRUc7UUFDSSxrQkFBYSxHQUFnQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzlDOztXQUVHO1FBQ0ksbUJBQWMsR0FBd0IsRUFBRSxDQUFDO0lBS1AsQ0FBQztJQUUxQzs7T0FFRztJQUNJLEtBQUssQ0FBQyxJQUFnQjtRQUMzQixJQUNFLElBQUksWUFBWSxzQ0FBaUI7WUFDakMsSUFBSSxZQUFZLDJDQUFtQixFQUNuQztZQUNBLElBQUksSUFBSSxDQUFDLDBCQUEwQixFQUFFO2dCQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDdEU7U0FDRjtRQUVELElBQUksSUFBSSxZQUFZLHNDQUFpQixFQUFFO1lBQ3JDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO1FBRUQsS0FBSyxNQUFNLEtBQUssSUFBSSxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuQjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVE7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QixNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3RFLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDOUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQywwQkFBMEIsRUFBRSxZQUFZLEtBQUssSUFBSSxDQUMzRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDakMsT0FBTyxFQUFFLENBQUM7U0FDWDthQUFNO1lBQ0wsT0FBTztnQkFDTCxnTEFBZ0wsZ0JBQWdCLENBQUMsSUFBSSxDQUNuTSxJQUFJLENBQ0wsRUFBRTthQUNKLENBQUM7U0FDSDtJQUNILENBQUM7Q0FDRjtBQTNERCw0REEyREMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuaW1wb3J0IHsgSUNvbnN0cnVjdCwgSVZhbGlkYXRpb24sIE5vZGUgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtUHJvdmlkZXIgfSBmcm9tIFwiLi4vdGVycmFmb3JtLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1SZXNvdXJjZSB9IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVzb3VyY2VcIjtcbmltcG9ydCB7IFRlcnJhZm9ybURhdGFTb3VyY2UgfSBmcm9tIFwiLi4vdGVycmFmb3JtLWRhdGEtc291cmNlXCI7XG5cbi8qKlxuICogQSB2YWxpZGF0aW9uIHRoYXQgaXMgYWRkZWQgYnkgZGVmYXVsdCwgZW5zdXJpbmcgdGhhdCBhbGwgcHJvdmlkZXJzXG4gKiB1c2VkIGFyZSBkZWZpbmVkIHZpYSBDb25zdHJ1Y3RzLlxuICovXG5leHBvcnQgY2xhc3MgVmFsaWRhdGVQcm92aWRlclByZXNlbmNlIGltcGxlbWVudHMgSVZhbGlkYXRpb24ge1xuICAvKipcbiAgICogQWxsIHByb3ZpZGVyIG5hbWVzIGZvdW5kIGluIHRoZSBjb25zdHJ1Y3QgdHJlZS5cbiAgICovXG4gIHB1YmxpYyBwcm92aWRlck5hbWVzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgLyoqXG4gICAqIEFsbCBUZXJyYWZvcm1Qcm92aWRlcnMgZm91bmQgaW4gdGhlIGNvbnN0cnVjdCB0cmVlLlxuICAgKi9cbiAgcHVibGljIGZvdW5kUHJvdmlkZXJzOiBUZXJyYWZvcm1Qcm92aWRlcltdID0gW107XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBWYWxpZGF0ZVByb3ZpZGVyUHJlc2VuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBob3N0OiBJQ29uc3RydWN0KSB7fVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGNvbnN0cnVjdCB0cmVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBwdWJsaWMgY2hlY2sobm9kZTogSUNvbnN0cnVjdCkge1xuICAgIGlmIChcbiAgICAgIG5vZGUgaW5zdGFuY2VvZiBUZXJyYWZvcm1SZXNvdXJjZSB8fFxuICAgICAgbm9kZSBpbnN0YW5jZW9mIFRlcnJhZm9ybURhdGFTb3VyY2VcbiAgICApIHtcbiAgICAgIGlmIChub2RlLnRlcnJhZm9ybUdlbmVyYXRvck1ldGFkYXRhKSB7XG4gICAgICAgIHRoaXMucHJvdmlkZXJOYW1lcy5hZGQobm9kZS50ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YS5wcm92aWRlck5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlIGluc3RhbmNlb2YgVGVycmFmb3JtUHJvdmlkZXIpIHtcbiAgICAgIHRoaXMuZm91bmRQcm92aWRlcnMucHVzaChub2RlKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIE5vZGUub2Yobm9kZSkuY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMuY2hlY2soY2hpbGQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gdGhlIHZhbGlkYXRpb25cbiAgICovXG4gIHB1YmxpYyB2YWxpZGF0ZSgpIHtcbiAgICB0aGlzLmNoZWNrKHRoaXMuaG9zdCk7XG5cbiAgICBjb25zdCBtaXNzaW5nUHJvdmlkZXJzID0gQXJyYXkuZnJvbSh0aGlzLnByb3ZpZGVyTmFtZXMpLmZpbHRlcigobmFtZSkgPT4ge1xuICAgICAgcmV0dXJuICF0aGlzLmZvdW5kUHJvdmlkZXJzLnNvbWUoXG4gICAgICAgIChwKSA9PiBwLnRlcnJhZm9ybUdlbmVyYXRvck1ldGFkYXRhPy5wcm92aWRlck5hbWUgPT09IG5hbWVcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpZiAobWlzc2luZ1Byb3ZpZGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgYEZvdW5kIHJlc291cmNlcyB3aXRob3V0IGEgbWF0Y2hpbmcgcHJvdmlkZXIgY29uc3RydWN0LiBQbGVhc2UgbWFrZSBzdXJlIHRvIGFkZCBwcm92aWRlciBjb25zdHJ1Y3RzIFtlLmcuIG5ldyBSYW5kb21Qcm92aWRlciguLi4pXSB0byB5b3VyIHN0YWNrIGZvciB0aGUgZm9sbG93aW5nIHByb3ZpZGVyczogJHttaXNzaW5nUHJvdmlkZXJzLmpvaW4oXG4gICAgICAgICAgXCIsIFwiXG4gICAgICAgICl9YCxcbiAgICAgIF07XG4gICAgfVxuICB9XG59XG4iXX0=