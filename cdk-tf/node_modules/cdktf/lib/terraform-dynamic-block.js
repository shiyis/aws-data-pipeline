"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformDynamicBlock = void 0;
const tokens_1 = require("./tokens");
const stack_trace_1 = require("./tokens/private/stack-trace");
const DYNAMIC_BLOCK_SYMBOL = Symbol.for("cdktf/TerraformDynamicBlock");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformDynamicBlock {
    // labels: TODO: support labels, but they seem to be quite rare (issue: https://github.com/hashicorp/terraform-cdk/issues/1939)
    constructor(args) {
        this.iterator = "each"; // name of temporary variable used in iteration, needed in the future when allowing nesting iterators
        Object.defineProperty(this, DYNAMIC_BLOCK_SYMBOL, { value: true });
        this.creationStack = stack_trace_1.captureStackTrace();
        this.forEach = args.forEach;
        this.content = args.content;
    }
    static fromDynamicExpression(expr) {
        return new TerraformDynamicBlock({
            forEach: expr.iterator,
            content: expr.content,
        });
    }
    resolve() {
        throw new Error(`Tried to directly resolve a TerraformDynamicBlock which is not supported.
Dynamic blocks are only supported on block attributes of resources, data sources and providers.`);
    }
    toTerraformDynamicBlockJson() {
        return tokens_1.Lazy.anyValue({
            produce: (context) => {
                context.iteratorContext = "DYNAMIC_BLOCK"; // resolve nested Lazy values (within this.content) as dynamic block expressions
                return {
                    for_each: this.forEach._getForEachExpression(),
                    iterator: this.iterator,
                    content: context.resolve(this.content),
                };
            },
        });
    }
    toString() {
        return tokens_1.Token.asString(this);
    }
    /**
     * Turn this Dynamic Block into JSON
     *
     * Called automatically when JSON.stringify() is called on this.
     */
    toJSON() {
        return "<unresolved-terraform-dynamic-block>";
    }
    static isTerraformDynamicBlock(x) {
        return x !== null && typeof x === "object" && DYNAMIC_BLOCK_SYMBOL in x;
    }
}
exports.TerraformDynamicBlock = TerraformDynamicBlock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWR5bmFtaWMtYmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXJyYWZvcm0tZHluYW1pYy1ibG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSxxQ0FBcUU7QUFDckUsOERBQWlFO0FBRWpFLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBRXZFLCtDQUErQztBQUMvQyxNQUFhLHFCQUFxQjtJQUtoQywrSEFBK0g7SUFFL0gsWUFBb0IsSUFHbkI7UUFQZSxhQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMscUdBQXFHO1FBUXRJLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLGFBQWEsR0FBRywrQkFBaUIsRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDOUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxxQkFBcUIsQ0FDakMsSUFBZ0M7UUFFaEMsT0FBTyxJQUFJLHFCQUFxQixDQUFDO1lBQy9CLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN0QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLElBQUksS0FBSyxDQUNiO2dHQUMwRixDQUMzRixDQUFDO0lBQ0osQ0FBQztJQUVNLDJCQUEyQjtRQUNoQyxPQUFPLGFBQUksQ0FBQyxRQUFRLENBQUM7WUFDbkIsT0FBTyxFQUFFLENBQUMsT0FBd0IsRUFBRSxFQUFFO2dCQUNwQyxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxDQUFDLGdGQUFnRjtnQkFFM0gsT0FBTztvQkFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRTtvQkFDOUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO29CQUN2QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2lCQUN2QyxDQUFDO1lBQ0osQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxjQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTTtRQUNKLE9BQU8sc0NBQXNDLENBQUM7SUFDaEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFNO1FBQzFDLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksb0JBQW9CLElBQUksQ0FBQyxDQUFDO0lBQzFFLENBQUM7Q0FDRjtBQS9ERCxzREErREMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuaW1wb3J0IHsgVGVycmFmb3JtRHluYW1pY0V4cHJlc3Npb24gfSBmcm9tIFwiLi90ZXJyYWZvcm0tZHluYW1pYy1leHByZXNzaW9uXCI7XG5pbXBvcnQgeyBJVGVycmFmb3JtSXRlcmF0b3IgfSBmcm9tIFwiLi90ZXJyYWZvcm0taXRlcmF0b3JcIjtcbmltcG9ydCB7IElSZXNvbHZhYmxlLCBJUmVzb2x2ZUNvbnRleHQsIExhenksIFRva2VuIH0gZnJvbSBcIi4vdG9rZW5zXCI7XG5pbXBvcnQgeyBjYXB0dXJlU3RhY2tUcmFjZSB9IGZyb20gXCIuL3Rva2Vucy9wcml2YXRlL3N0YWNrLXRyYWNlXCI7XG5cbmNvbnN0IERZTkFNSUNfQkxPQ0tfU1lNQk9MID0gU3ltYm9sLmZvcihcImNka3RmL1RlcnJhZm9ybUR5bmFtaWNCbG9ja1wiKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBUZXJyYWZvcm1EeW5hbWljQmxvY2sgaW1wbGVtZW50cyBJUmVzb2x2YWJsZSB7XG4gIHB1YmxpYyByZWFkb25seSBjcmVhdGlvblN0YWNrOiBzdHJpbmdbXTtcbiAgcHVibGljIHJlYWRvbmx5IGZvckVhY2g6IElUZXJyYWZvcm1JdGVyYXRvcjtcbiAgcHVibGljIHJlYWRvbmx5IGl0ZXJhdG9yID0gXCJlYWNoXCI7IC8vIG5hbWUgb2YgdGVtcG9yYXJ5IHZhcmlhYmxlIHVzZWQgaW4gaXRlcmF0aW9uLCBuZWVkZWQgaW4gdGhlIGZ1dHVyZSB3aGVuIGFsbG93aW5nIG5lc3RpbmcgaXRlcmF0b3JzXG4gIHB1YmxpYyByZWFkb25seSBjb250ZW50OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICAvLyBsYWJlbHM6IFRPRE86IHN1cHBvcnQgbGFiZWxzLCBidXQgdGhleSBzZWVtIHRvIGJlIHF1aXRlIHJhcmUgKGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vaGFzaGljb3JwL3RlcnJhZm9ybS1jZGsvaXNzdWVzLzE5MzkpXG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihhcmdzOiB7XG4gICAgZm9yRWFjaDogSVRlcnJhZm9ybUl0ZXJhdG9yO1xuICAgIGNvbnRlbnQ6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gIH0pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgRFlOQU1JQ19CTE9DS19TWU1CT0wsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgdGhpcy5jcmVhdGlvblN0YWNrID0gY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB0aGlzLmZvckVhY2ggPSBhcmdzLmZvckVhY2g7XG4gICAgdGhpcy5jb250ZW50ID0gYXJncy5jb250ZW50O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmcm9tRHluYW1pY0V4cHJlc3Npb24oXG4gICAgZXhwcjogVGVycmFmb3JtRHluYW1pY0V4cHJlc3Npb25cbiAgKTogVGVycmFmb3JtRHluYW1pY0Jsb2NrIHtcbiAgICByZXR1cm4gbmV3IFRlcnJhZm9ybUR5bmFtaWNCbG9jayh7XG4gICAgICBmb3JFYWNoOiBleHByLml0ZXJhdG9yLFxuICAgICAgY29udGVudDogZXhwci5jb250ZW50LFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHJlc29sdmUoKTogYW55IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVHJpZWQgdG8gZGlyZWN0bHkgcmVzb2x2ZSBhIFRlcnJhZm9ybUR5bmFtaWNCbG9jayB3aGljaCBpcyBub3Qgc3VwcG9ydGVkLlxuRHluYW1pYyBibG9ja3MgYXJlIG9ubHkgc3VwcG9ydGVkIG9uIGJsb2NrIGF0dHJpYnV0ZXMgb2YgcmVzb3VyY2VzLCBkYXRhIHNvdXJjZXMgYW5kIHByb3ZpZGVycy5gXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB0b1RlcnJhZm9ybUR5bmFtaWNCbG9ja0pzb24oKTogSVJlc29sdmFibGUge1xuICAgIHJldHVybiBMYXp5LmFueVZhbHVlKHtcbiAgICAgIHByb2R1Y2U6IChjb250ZXh0OiBJUmVzb2x2ZUNvbnRleHQpID0+IHtcbiAgICAgICAgY29udGV4dC5pdGVyYXRvckNvbnRleHQgPSBcIkRZTkFNSUNfQkxPQ0tcIjsgLy8gcmVzb2x2ZSBuZXN0ZWQgTGF6eSB2YWx1ZXMgKHdpdGhpbiB0aGlzLmNvbnRlbnQpIGFzIGR5bmFtaWMgYmxvY2sgZXhwcmVzc2lvbnNcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZvcl9lYWNoOiB0aGlzLmZvckVhY2guX2dldEZvckVhY2hFeHByZXNzaW9uKCksXG4gICAgICAgICAgaXRlcmF0b3I6IHRoaXMuaXRlcmF0b3IsXG4gICAgICAgICAgY29udGVudDogY29udGV4dC5yZXNvbHZlKHRoaXMuY29udGVudCksXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gVG9rZW4uYXNTdHJpbmcodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogVHVybiB0aGlzIER5bmFtaWMgQmxvY2sgaW50byBKU09OXG4gICAqXG4gICAqIENhbGxlZCBhdXRvbWF0aWNhbGx5IHdoZW4gSlNPTi5zdHJpbmdpZnkoKSBpcyBjYWxsZWQgb24gdGhpcy5cbiAgICovXG4gIHRvSlNPTigpOiBhbnkge1xuICAgIHJldHVybiBcIjx1bnJlc29sdmVkLXRlcnJhZm9ybS1keW5hbWljLWJsb2NrPlwiO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc1RlcnJhZm9ybUR5bmFtaWNCbG9jayh4OiBhbnkpOiB4IGlzIFRlcnJhZm9ybUR5bmFtaWNCbG9jayB7XG4gICAgcmV0dXJuIHggIT09IG51bGwgJiYgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgRFlOQU1JQ19CTE9DS19TWU1CT0wgaW4geDtcbiAgfVxufVxuIl19