"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformSelf = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const tfExpression_1 = require("./tfExpression");
const token_1 = require("./tokens/token");
const util_1 = require("./util");
/**
 * Expressions in connection blocks cannot refer to their parent resource by name.
 * References create dependencies, and referring to a resource by name within its own block would create a dependency cycle.
 * Instead, expressions can use the self object, which represents the connection's parent resource and has all of that resource's attributes.
 * For example, use self.public_ip to reference an aws_instance's public_ip attribute.
 */
class TerraformSelf {
    static getInterpolation(key) {
        return `self.${util_1.snakeCase(key)}`;
    }
    /**
     * Only usable within a connection block to reference the connections parent resource.
     * Access a property on the resource like this: `getString("publicIp")`
     */
    static getString(key) {
        return token_1.Token.asString(tfExpression_1.ref(TerraformSelf.getInterpolation(key)));
    }
    /**
     * Only usable within a connection block to reference the connections parent resource.
     * Access a property on the resource like this: `getNumber("hostPort")`
     */
    static getNumber(key) {
        return token_1.Token.asNumber(tfExpression_1.ref(TerraformSelf.getInterpolation(key)));
    }
    /**
     * Only usable within a connection block to reference the connections parent resource.
     * Access a property on the resource like this: `getAny("hostPort")`
     */
    static getAny(key) {
        return token_1.Token.asAny(tfExpression_1.ref(TerraformSelf.getInterpolation(key)));
    }
}
exports.TerraformSelf = TerraformSelf;
_a = JSII_RTTI_SYMBOL_1;
TerraformSelf[_a] = { fqn: "cdktf.TerraformSelf", version: "0.13.0" };
//# sourceMappingURL=data:application/json;base64,