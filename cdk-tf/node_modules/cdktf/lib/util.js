"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processDynamicAttributes = exports.keysToSnakeCase = exports.snakeCase = exports.deepMerge = exports.terraformBinaryName = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const terraform_dynamic_block_1 = require("./terraform-dynamic-block");
const token_1 = require("./tokens/token");
exports.terraformBinaryName = process.env.TERRAFORM_BINARY_NAME || "terraform";
/**
 * Merges `source` into `target`, overriding any existing values.
 * `undefined` will cause a value to be deleted.
 */
function deepMerge(target, ...sources) {
    if (token_1.Tokenization.isResolvable(target) && sources.length > 0) {
        throw new Error(`Invalid usage. Target (${target.toString()}) can not be a resolvable token when overrides are specified. Please replace the value of the field you are overriding with a static value.`);
    }
    for (const source of sources) {
        if (typeof source !== "object" || typeof target !== "object") {
            throw new Error(`Invalid usage. Both source (${JSON.stringify(source)}) and target (${JSON.stringify(target)}) must be objects`);
        }
        for (const key of Object.keys(source)) {
            const value = source[key];
            if (typeof value === "object" && value != null && !Array.isArray(value)) {
                // if the value at the target is not an object, override it with an
                // object so we can continue the recursion
                if (typeof target[key] !== "object") {
                    target[key] = {};
                }
                // if the value is a resolvable we don't want to recurse into it
                if (token_1.Tokenization.isResolvable(value)) {
                    target[key] = value;
                    continue;
                }
                deepMerge(target[key], value);
            }
            else if (typeof value === "object" &&
                value != null &&
                Array.isArray(value)) {
                if (Array.isArray(target[key])) {
                    target[key] = [...target[key], ...value];
                }
                else {
                    target[key] = value;
                }
            }
            else if (value === undefined) {
                delete target[key];
            }
            else {
                target[key] = value;
            }
        }
    }
    return target;
}
exports.deepMerge = deepMerge;
/**
 * Transforms a string to snake case
 */
function snakeCase(str) {
    if (!str)
        return "";
    return String(str)
        .replace(/^[^A-Za-z0-9]*|[^A-Za-z0-9]*$/g, "")
        .replace(/([a-z0-9])([A-Z])/g, (_m, a, b) => a + "_" + b.toLowerCase())
        .replace(/[^A-Za-z0-9]+|_+/g, "_")
        .toLowerCase();
}
exports.snakeCase = snakeCase;
/**
 * Transforms all keys in a object to snake case
 */
function keysToSnakeCase(object) {
    if (token_1.Tokenization.isResolvable(object)) {
        return object;
    }
    if (Array.isArray(object)) {
        return object.map((e) => {
            return typeof e === "object" ? keysToSnakeCase(e) : e;
        });
    }
    const keys = Object.keys(object);
    return keys.reduce((newObject, key) => {
        if (key === "tags") {
            newObject[key] = object[key];
            return newObject;
        }
        let value = object[key];
        if (typeof value === "object") {
            value = keysToSnakeCase(value);
        }
        if (Array.isArray(value)) {
            value = value.map((e) => {
                return typeof e === "object" ? keysToSnakeCase(e) : e;
            });
        }
        newObject[snakeCase(key)] = value;
        return newObject;
    }, {});
}
exports.keysToSnakeCase = keysToSnakeCase;
/**
 * dynamic attributes are located at a different position than normal block attributes
 * This method detects them and moves them from .attributeName to .dynamic.attributeName
 * It also invokes the .toTerraform() method on the dynamic attribute to get the correct
 * Terraform representation
 */
function processDynamicAttributes(attributes) {
    const result = {};
    Object.entries(attributes).forEach(([attributeName, value]) => {
        if (terraform_dynamic_block_1.TerraformDynamicBlock.isTerraformDynamicBlock(value)) {
            if (!result.dynamic) {
                result.dynamic = {};
            }
            result.dynamic[attributeName] = value.toTerraformDynamicBlockJson();
        }
        else {
            const recurse = value !== null &&
                typeof value === "object" &&
                value.constructor === Object; // only descend into plain objects
            result[attributeName] = recurse ? processDynamicAttributes(value) : value;
        }
    });
    return result;
}
exports.processDynamicAttributes = processDynamicAttributes;
//# sourceMappingURL=data:application/json;base64,