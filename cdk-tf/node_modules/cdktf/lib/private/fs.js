"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findFileAboveCwd = exports.hashPath = exports.archiveSync = exports.copySync = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const child_process_1 = require("child_process");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const HASH_LEN = 32;
// Full implementation at https://github.com/jprichardson/node-fs-extra/blob/master/lib/copy/copy-sync.js
/**
 * Copy a file or directory. The directory can have contents and subfolders.
 * @param {string} src
 * @param {string} dest
 */
function copySync(src, dest) {
    /**
     * Copies file if present otherwise walks subfolder
     * @param {string} p
     */
    function copyItem(p) {
        const sourcePath = path.resolve(src, p);
        const stat = fs.statSync(sourcePath);
        if (stat.isFile()) {
            fs.copyFileSync(sourcePath, path.resolve(dest, p));
        }
        if (stat.isDirectory()) {
            walkSubfolder(p);
        }
    }
    /**
     * Copies contents of subfolder
     * @param {string} p
     */
    function walkSubfolder(p) {
        const sourceDir = path.resolve(src, p);
        fs.mkdirSync(path.resolve(dest, p), { recursive: true });
        fs.readdirSync(sourceDir).forEach((item) => copyItem(path.join(p, item)));
    }
    walkSubfolder(".");
}
exports.copySync = copySync;
/**
 * Zips contents at src and places zip archive at dest
 * @param {string} src
 * @param {string} dest
 */
function archiveSync(src, dest) {
    const projectRoot = path.resolve(__dirname, "..", "..");
    const zipSyncPath = path.resolve(projectRoot, "bin", "zipSync.js");
    child_process_1.execSync(`node ${zipSyncPath} ${src} ${dest}`);
}
exports.archiveSync = archiveSync;
// eslint-disable-next-line jsdoc/require-jsdoc
function hashPath(src) {
    const hash = crypto.createHash("md5");
    // eslint-disable-next-line jsdoc/require-jsdoc
    function hashRecursion(p) {
        const stat = fs.statSync(p);
        if (stat.isFile()) {
            hash.update(fs.readFileSync(p));
        }
        else if (stat.isDirectory()) {
            fs.readdirSync(p).forEach((filename) => hashRecursion(path.resolve(p, filename)));
        }
    }
    hashRecursion(src);
    return hash.digest("hex").slice(0, HASH_LEN).toUpperCase();
}
exports.hashPath = hashPath;
// eslint-disable-next-line jsdoc/require-jsdoc
function findFileAboveCwd(file, rootPath = process.cwd()) {
    const fullPath = path.resolve(rootPath, file);
    if (fs.existsSync(fullPath)) {
        return fullPath;
    }
    const parentDir = path.resolve(rootPath, "..");
    if (fs.existsSync(parentDir) && parentDir !== rootPath) {
        return findFileAboveCwd(file, parentDir);
    }
    return null;
}
exports.findFileAboveCwd = findFileAboveCwd;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLGlEQUF5QztBQUN6Qyx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGlDQUFpQztBQUVqQyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFFcEIseUdBQXlHO0FBQ3pHOzs7O0dBSUc7QUFDSCxTQUFnQixRQUFRLENBQUMsR0FBVyxFQUFFLElBQVk7SUFDaEQ7OztPQUdHO0lBQ0gsU0FBUyxRQUFRLENBQUMsQ0FBUztRQUN6QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ2pCLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN0QixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsU0FBUyxhQUFhLENBQUMsQ0FBUztRQUM5QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2QyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDekQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQixDQUFDO0FBMUJELDRCQTBCQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixXQUFXLENBQUMsR0FBVyxFQUFFLElBQVk7SUFDbkQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNuRSx3QkFBUSxDQUFDLFFBQVEsV0FBVyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFKRCxrQ0FJQztBQUVELCtDQUErQztBQUMvQyxTQUFnQixRQUFRLENBQUMsR0FBVztJQUNsQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXRDLCtDQUErQztJQUMvQyxTQUFTLGFBQWEsQ0FBQyxDQUFTO1FBQzlCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakM7YUFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUM3QixFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ3JDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUN6QyxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzdELENBQUM7QUFqQkQsNEJBaUJDO0FBRUQsK0NBQStDO0FBQy9DLFNBQWdCLGdCQUFnQixDQUM5QixJQUFZLEVBQ1osUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUU7SUFFeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzNCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0MsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDdEQsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDMUM7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFmRCw0Q0FlQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIGNyeXB0byBmcm9tIFwiY3J5cHRvXCI7XG5cbmNvbnN0IEhBU0hfTEVOID0gMzI7XG5cbi8vIEZ1bGwgaW1wbGVtZW50YXRpb24gYXQgaHR0cHM6Ly9naXRodWIuY29tL2pwcmljaGFyZHNvbi9ub2RlLWZzLWV4dHJhL2Jsb2IvbWFzdGVyL2xpYi9jb3B5L2NvcHktc3luYy5qc1xuLyoqXG4gKiBDb3B5IGEgZmlsZSBvciBkaXJlY3RvcnkuIFRoZSBkaXJlY3RvcnkgY2FuIGhhdmUgY29udGVudHMgYW5kIHN1YmZvbGRlcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVzdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weVN5bmMoc3JjOiBzdHJpbmcsIGRlc3Q6IHN0cmluZykge1xuICAvKipcbiAgICogQ29waWVzIGZpbGUgaWYgcHJlc2VudCBvdGhlcndpc2Ugd2Fsa3Mgc3ViZm9sZGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwXG4gICAqL1xuICBmdW5jdGlvbiBjb3B5SXRlbShwOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzb3VyY2VQYXRoID0gcGF0aC5yZXNvbHZlKHNyYywgcCk7XG4gICAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKHNvdXJjZVBhdGgpO1xuICAgIGlmIChzdGF0LmlzRmlsZSgpKSB7XG4gICAgICBmcy5jb3B5RmlsZVN5bmMoc291cmNlUGF0aCwgcGF0aC5yZXNvbHZlKGRlc3QsIHApKTtcbiAgICB9XG4gICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgd2Fsa1N1YmZvbGRlcihwKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvcGllcyBjb250ZW50cyBvZiBzdWJmb2xkZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBcbiAgICovXG4gIGZ1bmN0aW9uIHdhbGtTdWJmb2xkZXIocDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc291cmNlRGlyID0gcGF0aC5yZXNvbHZlKHNyYywgcCk7XG4gICAgZnMubWtkaXJTeW5jKHBhdGgucmVzb2x2ZShkZXN0LCBwKSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgZnMucmVhZGRpclN5bmMoc291cmNlRGlyKS5mb3JFYWNoKChpdGVtKSA9PiBjb3B5SXRlbShwYXRoLmpvaW4ocCwgaXRlbSkpKTtcbiAgfVxuXG4gIHdhbGtTdWJmb2xkZXIoXCIuXCIpO1xufVxuXG4vKipcbiAqIFppcHMgY29udGVudHMgYXQgc3JjIGFuZCBwbGFjZXMgemlwIGFyY2hpdmUgYXQgZGVzdFxuICogQHBhcmFtIHtzdHJpbmd9IHNyY1xuICogQHBhcmFtIHtzdHJpbmd9IGRlc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFyY2hpdmVTeW5jKHNyYzogc3RyaW5nLCBkZXN0OiBzdHJpbmcpIHtcbiAgY29uc3QgcHJvamVjdFJvb3QgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4uXCIsIFwiLi5cIik7XG4gIGNvbnN0IHppcFN5bmNQYXRoID0gcGF0aC5yZXNvbHZlKHByb2plY3RSb290LCBcImJpblwiLCBcInppcFN5bmMuanNcIik7XG4gIGV4ZWNTeW5jKGBub2RlICR7emlwU3luY1BhdGh9ICR7c3JjfSAke2Rlc3R9YCk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgZnVuY3Rpb24gaGFzaFBhdGgoc3JjOiBzdHJpbmcpIHtcbiAgY29uc3QgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKFwibWQ1XCIpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG4gIGZ1bmN0aW9uIGhhc2hSZWN1cnNpb24ocDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKHApO1xuICAgIGlmIChzdGF0LmlzRmlsZSgpKSB7XG4gICAgICBoYXNoLnVwZGF0ZShmcy5yZWFkRmlsZVN5bmMocCkpO1xuICAgIH0gZWxzZSBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICBmcy5yZWFkZGlyU3luYyhwKS5mb3JFYWNoKChmaWxlbmFtZSkgPT5cbiAgICAgICAgaGFzaFJlY3Vyc2lvbihwYXRoLnJlc29sdmUocCwgZmlsZW5hbWUpKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBoYXNoUmVjdXJzaW9uKHNyYyk7XG4gIHJldHVybiBoYXNoLmRpZ2VzdChcImhleFwiKS5zbGljZSgwLCBIQVNIX0xFTikudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBmdW5jdGlvbiBmaW5kRmlsZUFib3ZlQ3dkKFxuICBmaWxlOiBzdHJpbmcsXG4gIHJvb3RQYXRoID0gcHJvY2Vzcy5jd2QoKVxuKTogc3RyaW5nIHwgbnVsbCB7XG4gIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5yZXNvbHZlKHJvb3RQYXRoLCBmaWxlKTtcbiAgaWYgKGZzLmV4aXN0c1N5bmMoZnVsbFBhdGgpKSB7XG4gICAgcmV0dXJuIGZ1bGxQYXRoO1xuICB9XG5cbiAgY29uc3QgcGFyZW50RGlyID0gcGF0aC5yZXNvbHZlKHJvb3RQYXRoLCBcIi4uXCIpO1xuICBpZiAoZnMuZXhpc3RzU3luYyhwYXJlbnREaXIpICYmIHBhcmVudERpciAhPT0gcm9vdFBhdGgpIHtcbiAgICByZXR1cm4gZmluZEZpbGVBYm92ZUN3ZChmaWxlLCBwYXJlbnREaXIpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iXX0=