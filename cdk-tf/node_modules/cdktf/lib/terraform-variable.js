"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformVariable = exports.VariableType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_element_1 = require("./terraform-element");
const util_1 = require("./util");
const tokens_1 = require("./tokens");
const tfExpression_1 = require("./tfExpression");
// eslint-disable-next-line jsdoc/require-jsdoc
class VariableType {
    static list(type) {
        return `list(${type})`;
    }
    static map(type) {
        return `map(${type})`;
    }
    static set(type) {
        return `set(${type})`;
    }
    static tuple(...elements) {
        return `tuple(${elements.join(", ")})`;
    }
    static object(attributes) {
        return `object({${Object.keys(attributes)
            .map((k) => k + "=" + attributes[k])
            .join(", ")}})`;
    }
}
exports.VariableType = VariableType;
_a = JSII_RTTI_SYMBOL_1;
VariableType[_a] = { fqn: "cdktf.VariableType", version: "0.13.0" };
VariableType.STRING = "string";
VariableType.NUMBER = "number";
VariableType.BOOL = "bool";
VariableType.ANY = "any";
VariableType.LIST = "list";
VariableType.MAP = "map";
VariableType.SET = "set";
VariableType.LIST_STRING = "list(string)";
VariableType.LIST_NUMBER = "list(number)";
VariableType.LIST_BOOL = "list(bool)";
VariableType.MAP_STRING = "map(string)";
VariableType.MAP_NUMBER = "map(number)";
VariableType.MAP_BOOL = "map(bool)";
VariableType.SET_STRING = "set(string)";
VariableType.SET_NUMBER = "set(number)";
VariableType.SET_BOOL = "set(bool)";
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformVariable extends terraform_element_1.TerraformElement {
    constructor(scope, id, config) {
        super(scope, id, "var");
        this.default = config.default;
        this.description = config.description;
        this.type = config.type;
        this.sensitive = config.sensitive;
        this.nullable = config.nullable;
        this._validation = config.validation;
    }
    get stringValue() {
        return tokens_1.Token.asString(this.interpolation());
    }
    get numberValue() {
        return tokens_1.Token.asNumber(this.interpolation());
    }
    get listValue() {
        return tokens_1.Token.asList(this.interpolation());
    }
    get booleanValue() {
        return this.interpolation();
    }
    get value() {
        return tokens_1.Token.asAny(this.interpolation());
    }
    get validation() {
        return this._validation;
    }
    addValidation(validation) {
        if (!this._validation) {
            this._validation = [];
        }
        this._validation.push(validation);
    }
    interpolation() {
        return tfExpression_1.ref(`var.${this.friendlyUniqueId}`, this.cdktfStack);
    }
    synthesizeAttributes() {
        return {
            default: this.default,
            description: this.description,
            type: this.type,
            sensitive: this.sensitive,
            nullable: this.nullable,
            validation: this.validation?.map((validation) => ({
                error_message: validation.errorMessage,
                condition: validation.condition,
            })),
        };
    }
    toTerraform() {
        return {
            variable: {
                [this.friendlyUniqueId]: util_1.deepMerge(util_1.keysToSnakeCase(this.synthesizeAttributes()), this.rawOverrides),
            },
        };
    }
}
exports.TerraformVariable = TerraformVariable;
_b = JSII_RTTI_SYMBOL_1;
TerraformVariable[_b] = { fqn: "cdktf.TerraformVariable", version: "0.13.0" };
//# sourceMappingURL=data:application/json;base64,